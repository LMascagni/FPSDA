//19/10/2023

STRUTTURA DEL PROGRAMMA IN C:

-LESSICO: insieme dei simboli (TOKEN) che si possono usare;
-SINTASSI: regole con cui si possono combinare le parole-> sono ferree e controllabili in automatico dal compilatore:
-SEMANTICA: cosa vogliono dire le frasi composte dal lessico secondo le regole della sintassi -> non è controllabile dal compilatore

TOKEN:
"parole" es: int, /*, */, flag_massimo etc.
(< separati da spazi e a capo)
divisi in 6 categorie
- identifiatore
- parole chiave
- costanti letterali
- stringhe letterali
- operatori
- separatori
- commenti e direttive

il compilatore cerca di realizzare token di lunghezza massima, man mano che il comp legge i caratteri compone il token finchè non viene interrotto da a capo o spazi
es. y---z il compilatore interpreta ciò come y-- - z e non come y - --z.

C è UN LINGUAGGIO IN FORMATO LIBERO!!!
la separazione tra gli elementi sintattici avviene con SIMBOLI SEPARATORI e PAROLE CHIAVE (;, {}, return EXIT_SUCCESS; etc)
Bisogna che il codice sia leggibile!!
perciò bisogna:
mettere spazi
commentare
indentare
non scrivere più operazioni su una riga

NB: non si possono scrivere commenti annidati (si può, ma non si deve)

IDENTIFICATORI:
nomi che rappresentano degli elementi
devono iniziare con lettere o _ NON NUMERI O SPAZI
possono contenere numeri, lettere, _
NON POSSONO CONTENERE SIMBOLI DI OPERAZIONI etc

C è CASE SENTITIVE:
scrivere la stessa parola con maiuscole e minuscole diverse identifica identificatori diversi


STRUTTURA DEL PROGRAMMA:
è un insieme di funzioni

nome_funzione (argomenti)
{
  blocco di istruzioni
}

struttura minima di un programma:
main () {}
[sottintendo pure int! che ora è sbagliato
programma che non fa nulla]

poichè il C è un ling tipizzato e dichiarativo, infatti avremo istruzioni di dichiarative e ist. operative (fanno cose).
le variabili vanno dichiarate tutte all'inizio della funzione per rigor di ordine.

scanf ("%d", &i)
"%d": tipo di dato, decimale
"%c": tipo di dato, carattere etc
&i: indirizzo di memoria

#include<stdio.h> etc
prima che il compilatore esegua il programma questo viene dato in pasto a un PREPROCESSOR che modifica il file sorgente includendo il contenuto del file della libreria
stdio.h x esempio.


VARIABILI E TIPI DI DATO:
variabili e costanti identificano le celle di memoria in cui vengono collocati i dati.
C è un linguaggio tipizzato: specifichi il tipo di dato che inserisci nella cella di memoria.

che tipi di dato posso manipolare in C?
solo 2: interi e dati in virgola mobile(reali)

con questi due tipi fondamentali possiamo costruire tipi derivati (definiti dall'utente: enumerazione, composizione)

alle variabili diamo nomi validi:
convenzione -> tutto minuscolo (o con la prima maiscola) x nomi variabili e funzioni
            -> tutto maiscolo x costanti -> usato nelle librerie standard del c


tipo di intero: LO SPAZIO IN MEMORIA CAMBIA A SECONDA DELL'HARDWARE

int: intero con segno in ALMENO 2 byte: intero grande quanto va bene al processore -> se è a 32 bit, int sarà a 32 etc
short int: intero con segno in ALMENO 2 byte
long int: intero con segno in ALMENO 4 byte
long long int: intero con segno in ALMENO 4 byte
(cambia la lunghezza della memorizzazione.)
char: intero di 8 bit (1byte), si chiama char perchè è solitamente usato per caratteri (scritti in ascii)

in Linuxo Windows 7 (a 32bit):
int: 32bit
short int: 16bit
long int: 32bit
long long int: 64bit
char: 8 bit

nuovi tipi di int, per essere sicura di momorizzare l'intero su n bit:
int16_t: intero su 16 bit con segno
int32_t: intero su 32 bit con segno
...
unit16_t:intero su 16 bit senza segno
...
quindi char è sempre con segno, perchè non scriviamo uchar (unsigned char).

VIRGOLA MOBILE:
float: singola precisione 4byte
double: doppia precisione 8byte -> usato ormai sempre al posto del float
long double: quadrupla precisione 10 o 12 byte

COSTANTI INTERE:
mai rappresentarle con degli 0 davanti perchè sennò vengono interpretati delle basi sbagliate:
NO: 123, 476, 024 -> 024 viene interpretato male
numeri scritti in esadecimale: 0xFF: costante in esadecimale contrassegnata dal 0x

COSTANTI IN FLOATING-POINT:
123.4
1e-5 1 elevato alla -5
6.22E4 6.22 elevato alla 4



'$': numero che corrisponde al simbolo $ nella tab ascii
'\n': codice ascii per A CAPO
'\t': codice ascii per TAB
'\\': codice ascii per \
'\0': codice ascii per carattere nullo, serve per delimitare le stringhe

STRINGHE COSTANTI:
"stringa costante"
"": stringa vuota, senza elementi. è l'elemento neutro (per esempio, usato per iniziare i cicli di creazione delle stringhe che aggiungono un carattere alla volta)
"Hello world" <-> "Hello " "world"

RAPPRESENTAZIONE INTERNA DELLE STRINGHE:
"ciao" <-> 'c' 'i' 'a' 'o' '\0' <- '\0' terminatore e sentinella. 'c': codice asci numerico per c
il numero di caratteri: 4
lunghezza totale della stringa: 5

'x': 1 byte -> codice ascii per x
"x": 2 byte -> 'x' '\0' (1 byte a carattere)

è UTILE: inizializzare la variabile nello stesso tempo in cui la dichiariamo:
int i = 0;
char lettera = 'a';

QUANTIFICATORE const:
const serve per dire a una funzione che una varibile che le passo non può essere MODIFICATA, ma può essere usata.

DEFINE:
#define: direttiva per essettuare una macrosostituzione -> definisco un simbolo (tutto maiscolo) identificatore con il suo valore sempre costante
es 
#define M_PI 3.14;

ovunque il scriva M_PI il compilatore sostituisce la parola con il suo valore costante definito precedentemente.

le variabili definite LOCALMENTE, sono variabili definite all'interno della funzione e esternamente a essa non esistono.
le variabili GLOBALI sono variabili esterne a tutte le funzioni e viste e usate da tutte le funzioni.
usarle può provocare la conflittualità e fa perdere di modularità il codice (rendono il codice dipendente da esse). 

SCOPE DI UNA VARIABILE:
è lo "spazio di utilizzo" del nome della variabile
dichiarato un indentificatore dentro una funzione, il suo scope è l'interno delle {}, fuori da queste posso riusare lo stesso identificatore in altre funzioni senza entrare in conflitto etc

- dichiarazione: dire che esiste una varibile/funzione.: dico che esiste ma non come è fatta, solo alcune sue proprietà -> es. una funzione restituisce un intero
NON CREO UNO SPAZIO IN MEMORIA PER IL VALORE DELLA VARIABILE.
- definizione: dire che esiste una varibile/funzione (e dico come è fatta), creare lo spazio in memoria della variabile e scrivere le operazioni della funzione. tutto ciò che rende operativa una
variabile o una funzione.

ESPRESSIONE: costrutto del liguaggio che possono essere valutati e da cui posso ottenere dei valori
se sono molto semplici non hanno operatori:
sono:
costanti (3.14 ha un valore, lo posso confrontare)
nomi di variabili (x ha un valore dato dai calcoli etc e può essere valutata)

OPERATORI:
- aritmetici: 
  +,-,*,
  / (slash, non backslash: \. è la divisione realizzata o in modalità div intera (5/2=2) o 
div in floating point (5/2=2.5) a seconda del tipo di operandi. basta che uno dei due sia reale (float) per avere la div. floating point), 
  % (-> modulo, resto della divisione intera) -> 5%2 = 1

(nome_del_tipo) espressione: cambia il tipo del risultato di un'espressione con un operatore di cast (nome_del_tipo)
es. media = somma / (double) numero_valori
ottengo la media in double

- unari:
  -z, cambia il segno

- relazionali: <, >, <=, >=, ==, !=
i concetti di vero o falso vengono codificati con due valori standard:
  FALSO = 0 ( if(condizione == 0){})
  VERO = qualsiasi cosa diversa da 0 
(non è lo standard che vero sia 1, ma si può fare però potrebbe essere vera a non valere 1)
(non è giusto scrivere if(condizione == 1) perchè l'espressione potrebbe non valere 1)

si può fare così:
min_inizializzato = 0;
...
if (min_inizializzato)
{

} else
{
  min_inizializzato = 1;
}

oppure
#define VERO = 1:
#define FALSO = 0;
min_inizializzato = FALSO;
...
if (min_inizializzato)
{

} else
{
  min_inizializzato = VERO;
}

- logici:
  && AND logico
  || OR logico
  ! NOT logico

&& AND: vero se entrambe gli operandi sono veri
|| OR: vero se almeno uno degli operandi è vero
! NOT: inverte il valore di un'espressione
    es: while (x <= y) <-> while ( !(x>y) )

- di assegnazione:
  = : assegna il valore e crea un'espressione -> quindi espressione; è un'operazione completa
      posso scrivere un'espressione valida del tipo 1+2; oppure ; che è un'espressione nulla che no fa niente, ma è valida
      il problema sorge nel caso in cui io scriva:
      while (i < n);
      {
        ...
      }
      il ciclo entra in loop e non fa niente all'infinito
tornando al = : posso usarlo così:
    if((x = y) < 10) -> valuto un'assegnazione

    si può anche fare assegnazioni multiple: x = (y = (z = 0))
    NB: la precedenza dell'operatore = è inferioriore a quella degli altri operatori

- operatori compatti:
  += : es. i = i + 10 <-> i+=10
  -= :
  *= :
  /= :
  %= :
... altri, ma sono di un altro tipo (bit a bit o bitwise, e manipolano direttamente i singoli bit).

- operatori di autoincrement e autodecrement:
  ++ : es. i++; <-> i = i+1; <-> i += 1; se i = 5, i++ vale 5 e lascia 6 in i
  -- : es. i--; <-> i = i-1; <-> i -= 1; se i = 5, i-- vale 5 e lascia 4 in i

  scrivere 
  ++i; significa che prima incrementa, poi dà il valore dell'espressione: ++i; se i = 5, ++i vale 6 e lascia 6 in i
  -- : significa che prima decremento, poi dà il valore dell'espressione: se i = 5, --i vale 4 e lascia 4 in i

  NON SI PUò SCRIVERE: i = i++;